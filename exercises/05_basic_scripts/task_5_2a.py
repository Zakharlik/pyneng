# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста,
а не адрес сети, надо преобразовать адрес хоста в адрес сети и вывести
адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые
28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
ipmask = input('IP/mask:')
# ipmask = '10.40.1.9/22'
ip_str, mask = ipmask.split('/')
mask = int(mask)

mask_str = '1' * mask + '0' * (32 - mask)
mask_bin = [int(mask_str[0:8], 2),
            int(mask_str[8:16], 2),
            int(mask_str[16:24], 2),
            int(mask_str[24:32], 2)]

ip_dec_str = ip_str.split('.')
ip_dec = []
ip_dec.append(int(ip_dec_str[0]))
ip_dec.append(int(ip_dec_str[1]))
ip_dec.append(int(ip_dec_str[2]))
ip_dec.append(int(ip_dec_str[3]))

ip_str_bin = f'{ip_dec[0]:08b}{ip_dec[1]:08b}{ip_dec[2]:08b}{ip_dec[3]:08b}'
net_str = ip_str_bin[:mask] + '0' * (32 - mask)

net_bin = [int(net_str[0:8], 2),
           int(net_str[8:16], 2),
           int(net_str[16:24], 2),
           int(net_str[24:32], 2)]

template = f'''Network:
{net_bin[0]:<8}  {net_bin[1]:<8}  {net_bin[2]:<8}  {net_bin[3]:<8}
{net_bin[0]:08b}  {net_bin[1]:08b}  {net_bin[2]:08b}  {net_bin[3]:08b}

Mask:
/{mask}
{mask_bin[0]:<8}  {mask_bin[1]:<8}  {mask_bin[2]:<8}  {mask_bin[3]:<8}
{mask_bin[0]:08b}  {mask_bin[1]:08b}  {mask_bin[2]:08b}  {mask_bin[3]:08b}
'''

print(template)
